{
    "_readableState":
     "ReadableState" {
       "objectMode": false,
       highWaterMark: 16384,
       buffer: BufferList { head: null, tail: null, length: 0
        },
       length: 0,
       pipes: null,
       pipesCount: 0,
       flowing: null,
       ended: true,
       endEmitted: false,
       reading: false,
       sync: true,
       needReadable: false,
       emittedReadable: false,
       readableListening: false,
       resumeScheduled: false,
       paused: true,
       emitClose: true,
       autoDestroy: false,
       destroyed: false,
       defaultEncoding: 'utf8',
       awaitDrain: 0,
       readingMore: true,
       decoder: null,
       encoding: null
    },
    readable: true,
    _events: [Object: null prototype
    ] { end: [Function: resetHeadersTimeoutOnReqEnd
        ]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket:
     Socket {
       connecting: false,
       _hadError: false,
       _handle:
        TCP {
          reading: true,
          onread: [Function: onStreamRead
            ],
          onconnection: null,
          _consumed: true,
            [Symbol(owner)
            ]: [Circular
            ]
        },
       _parent: null,
       _host: null,
       _readableState:
        ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0
            },
          length: 0,
          pipes: null,
          pipesCount: 0,
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          paused: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          defaultEncoding: 'utf8',
          awaitDrain: 0,
          readingMore: false,
          decoder: null,
          encoding: null
        },
       readable: true,
       _events: [Object: null prototype
        ] {
          end: [Array
            ],
          drain: [Array
            ],
          timeout: [Function: socketOnTimeout
            ],
          data: [Function: bound socketOnData
            ],
          error: [Array
            ],
          close: [Array
            ],
          resume: [Function: onSocketResume
            ],
          pause: [Function: onSocketPause
            ]
        },
       _eventsCount: 8,
       _maxListeners: undefined,
       _writableState:
        WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite
            ],
          writecb: null,
          writelen: 0,
          bufferedRequest: null,
          lastBufferedRequest: null,
          pendingcb: 0,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          bufferedRequestCount: 0,
          corkedRequestsFree: [Object
            ]
        },
       writable: true,
       allowHalfOpen: true,
       _sockname: null,
       _pendingData: null,
       _pendingEncoding: '',
       server:
        Server {
          _events: [Object
            ],
          _eventsCount: 4,
          _maxListeners: undefined,
          _connections: 2,
          _handle: [TCP
            ],
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 120000,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 40000,
          _connectionKey: '6: : : : 3000',
            [Symbol(IncomingMessage)
            ]: [Function
            ],
            [Symbol(ServerResponse)
            ]: [Function
            ],
            [Symbol(asyncId)
            ]: 6
        },
       _server:
        Server {
          _events: [Object
            ],
          _eventsCount: 4,
          _maxListeners: undefined,
          _connections: 2,
          _handle: [TCP
            ],
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 120000,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 40000,
          _connectionKey: '6: : : : 3000',
            [Symbol(IncomingMessage)
            ]: [Function
            ],
            [Symbol(ServerResponse)
            ]: [Function
            ],
            [Symbol(asyncId)
            ]: 6
        },
       timeout: 120000,
       parser:
        HTTPParser {
          '0': [Function: parserOnHeaders
            ],
          '1': [Function: parserOnHeadersComplete
            ],
          '2': [Function: parserOnBody
            ],
          '3': [Function: parserOnMessageComplete
            ],
          '4': [Function: bound onParserExecute
            ],
          _headers: [],
          _url: '',
          socket: [Circular
            ],
          incoming: [Circular
            ],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming
            ],
          parsingHeadersStart: 0,
            [Symbol(isReused)
            ]: false
        },
       on: [Function: socketOnWrap
        ],
       _paused: false,
       _httpMessage:
        ServerResponse {
          _events: [Object
            ],
          _eventsCount: 2,
          _maxListeners: undefined,
          output: [],
          outputEncodings: [],
          outputCallbacks: [],
          outputSize: 0,
          writable: true,
          _last: false,
          chunkedEncoding: false,
          shouldKeepAlive: true,
          useChunkedEncodingByDefault: true,
          sendDate: true,
          _removedConnection: false,
          _removedContLen: false,
          _removedTE: false,
          _contentLength: null,
          _hasBody: true,
          _trailer: '',
          finished: false,
          _headerSent: false,
          socket: [Circular
            ],
          connection: [Circular
            ],
          _header: null,
          _onPendingData: [Function: bound updateOutgoingData
            ],
          _sent100: false,
          _expect_continue: false,
          req: [Circular
            ],
          locals: [Object: null prototype
            ] {},
          _startAt: undefined,
          _startTime: undefined,
          writeHead: [Function: writeHead
            ],
          __onFinished: [Function
            ],
            [Symbol(isCorked)
            ]: false,
            [Symbol(outHeadersKey)
            ]: [Object
            ]
        },
       _peername: { address: ': : 1', family: 'IPv6', port: 51399
        },
        [Symbol(asyncId)
        ]: 15,
        [Symbol(lastWriteQueueSize)
        ]: 0,
        [Symbol(timeout)
        ]:
        Timeout {
          _called: false,
          _idleTimeout: 120000,
          _idlePrev: [TimersList
            ],
          _idleNext: [Timeout
            ],
          _idleStart: 97601,
          _onTimeout: [Function: bound
            ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
            [Symbol(unrefed)
            ]: true,
            [Symbol(asyncId)
            ]: 16,
            [Symbol(triggerId)
            ]: 15
        },
        [Symbol(kBytesRead)
        ]: 0,
        [Symbol(kBytesWritten)
        ]: 0
    },
    connection:
     Socket {
       connecting: false,
       _hadError: false,
       _handle:
        TCP {
          reading: true,
          onread: [Function: onStreamRead
            ],
          onconnection: null,
          _consumed: true,
            [Symbol(owner)
            ]: [Circular
            ]
        },
       _parent: null,
       _host: null,
       _readableState:
        ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0
            },
          length: 0,
          pipes: null,
          pipesCount: 0,
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          paused: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          defaultEncoding: 'utf8',
          awaitDrain: 0,
          readingMore: false,
          decoder: null,
          encoding: null
        },
       readable: true,
       _events: [Object: null prototype
        ] {
          end: [Array
            ],
          drain: [Array
            ],
          timeout: [Function: socketOnTimeout
            ],
          data: [Function: bound socketOnData
            ],
          error: [Array
            ],
          close: [Array
            ],
          resume: [Function: onSocketResume
            ],
          pause: [Function: onSocketPause
            ]
        },
       _eventsCount: 8,
       _maxListeners: undefined,
       _writableState:
        WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite
            ],
          writecb: null,
          writelen: 0,
          bufferedRequest: null,
          lastBufferedRequest: null,
          pendingcb: 0,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          bufferedRequestCount: 0,
          corkedRequestsFree: [Object
            ]
        },
       writable: true,
       allowHalfOpen: true,
       _sockname: null,
       _pendingData: null,
       _pendingEncoding: '',
       server:
        Server {
          _events: [Object
            ],
          _eventsCount: 4,
          _maxListeners: undefined,
          _connections: 2,
          _handle: [TCP
            ],
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 120000,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 40000,
          _connectionKey: '6: : : : 3000',
            [Symbol(IncomingMessage)
            ]: [Function
            ],
            [Symbol(ServerResponse)
            ]: [Function
            ],
            [Symbol(asyncId)
            ]: 6
        },
       _server:
        Server {
          _events: [Object
            ],
          _eventsCount: 4,
          _maxListeners: undefined,
          _connections: 2,
          _handle: [TCP
            ],
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 120000,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 40000,
          _connectionKey: '6: : : : 3000',
            [Symbol(IncomingMessage)
            ]: [Function
            ],
            [Symbol(ServerResponse)
            ]: [Function
            ],
            [Symbol(asyncId)
            ]: 6
        },
       timeout: 120000,
       parser:
        HTTPParser {
          '0': [Function: parserOnHeaders
            ],
          '1': [Function: parserOnHeadersComplete
            ],
          '2': [Function: parserOnBody
            ],
          '3': [Function: parserOnMessageComplete
            ],
          '4': [Function: bound onParserExecute
            ],
          _headers: [],
          _url: '',
          socket: [Circular
            ],
          incoming: [Circular
            ],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming
            ],
          parsingHeadersStart: 0,
            [Symbol(isReused)
            ]: false
        },
       on: [Function: socketOnWrap
        ],
       _paused: false,
       _httpMessage:
        ServerResponse {
          _events: [Object
            ],
          _eventsCount: 2,
          _maxListeners: undefined,
          output: [],
          outputEncodings: [],
          outputCallbacks: [],
          outputSize: 0,
          writable: true,
          _last: false,
          chunkedEncoding: false,
          shouldKeepAlive: true,
          useChunkedEncodingByDefault: true,
          sendDate: true,
          _removedConnection: false,
          _removedContLen: false,
          _removedTE: false,
          _contentLength: null,
          _hasBody: true,
          _trailer: '',
          finished: false,
          _headerSent: false,
          socket: [Circular
            ],
          connection: [Circular
            ],
          _header: null,
          _onPendingData: [Function: bound updateOutgoingData
            ],
          _sent100: false,
          _expect_continue: false,
          req: [Circular
            ],
          locals: [Object: null prototype
            ] {},
          _startAt: undefined,
          _startTime: undefined,
          writeHead: [Function: writeHead
            ],
          __onFinished: [Function
            ],
            [Symbol(isCorked)
            ]: false,
            [Symbol(outHeadersKey)
            ]: [Object
            ]
        },
       _peername: { address: ': : 1', family: 'IPv6', port: 51399
        },
        [Symbol(asyncId)
        ]: 15,
        [Symbol(lastWriteQueueSize)
        ]: 0,
        [Symbol(timeout)
        ]:
        Timeout {
          _called: false,
          _idleTimeout: 120000,
          _idlePrev: [TimersList
            ],
          _idleNext: [Timeout
            ],
          _idleStart: 97601,
          _onTimeout: [Function: bound
            ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
            [Symbol(unrefed)
            ]: true,
            [Symbol(asyncId)
            ]: 16,
            [Symbol(triggerId)
            ]: 15
        },
        [Symbol(kBytesRead)
        ]: 0,
        [Symbol(kBytesWritten)
        ]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: true,
    headers: { host: 'localhost: 3000',
       connection: 'keep-alive',
       'upgrade-insecure-requests': '1',
       'user-agent':
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36',
       accept:
        'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,* /*;q=0.8,application/signed-exchange;v=b3;q=0.9',
       'sec-fetch-site': 'same-origin',
       'sec-fetch-mode': 'navigate',
       'sec-fetch-user': '?1',
       'sec-fetch-dest': 'document',
       referer: 'http://localhost:3000/',
       'accept-encoding': 'gzip, deflate, br',
       'accept-language': 'en-US,en;q=0.9,la;q=0.8,fr;q=0.7',
       cookie:
        'fornax_anonymousId=c9b0e38f-3b85-4bdd-8af8-d0ad3b6e4b33; lastVisitedCategory=20; XSRF-TOKEN=d0fdb4d876cd2ee906ee71331302ddf39626fdc4f32864f94be18fc76e694f4f; io=b9CZSeh1I7cGcwfQAAAu; wordpress_test_cookie=WP+Cookie+check; et_pb_ab_view_page_34=839ecd99d3abb5b287202f5e56a699ea; et_pb_ab_read_page_34false=true; tk_ai=woo%3A1aKSNcAgWUZWMZU6dZJ0abcm; mailchimp.cart.previous_email=christian@uxtoolbox.com; mailchimp.cart.current_email=christian510@gmail.com; wordpress_logged_in_cd9b744c619529c4988e0e94344eaf12=fast5%7C1598037734%7Ch4KmwYcDS4fqzTdOOlAujcT0OBFJRAZlp0mPKwHmWIe%7Cfa56153f817aa703c5a1eadb65b9173ba5eebcad37ea7d0adf8df523b8fd6a77; et-pb-recent-items-colors=%23ffffff%7C%23000000%7C%236eba01%7C%233b68b6%7C%2386c046%7C%231f244d%7Crgba(59%2C104%2C182%2C0.68)%7Crgba(0%2C0%2C0%2C0); et-pb-recent-items-font_family=Playfair%20Display%7CQuicksand%7CMontserrat; wp-settings-time-1=1597869139; wp-settings-1=imgsize%3D%26libraryContent%3Dbrowse%26editor%3Dtinymce%26mfold%3Df%26hidetb%3D1%26align%3Dcenter; woocommerce_items_in_cart=1; woocommerce_cart_hash=124c28c6c8c1cab337dc69de24e6a402' },
    rawHeaders:
     [ 'Host',
       'localhost:3000',
       'Connection',
       'keep-alive',
       'Upgrade-Insecure-Requests',
       '1',
       'User-Agent',
       'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36',
       'Accept',
       'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
       'Sec-Fetch-Site',
       'same-origin',
       'Sec-Fetch-Mode',
       'navigate',
       'Sec-Fetch-User',
       '?1',
       'Sec-Fetch-Dest',
       'document',
       'Referer',
       'http: //localhost:3000/',
       'Accept-Encoding',
       'gzip, deflate, br',
       'Accept-Language',
       'en-US,en;q=0.9,la;q=0.8,fr;q=0.7',
       'Cookie',
       'fornax_anonymousId=c9b0e38f-3b85-4bdd-8af8-d0ad3b6e4b33; lastVisitedCategory=20; XSRF-TOKEN=d0fdb4d876cd2ee906ee71331302ddf39626fdc4f32864f94be18fc76e694f4f; io=b9CZSeh1I7cGcwfQAAAu; wordpress_test_cookie=WP+Cookie+check; et_pb_ab_view_page_34=839ecd99d3abb5b287202f5e56a699ea; et_pb_ab_read_page_34false=true; tk_ai=woo%3A1aKSNcAgWUZWMZU6dZJ0abcm; mailchimp.cart.previous_email=christian@uxtoolbox.com; mailchimp.cart.current_email=christian510@gmail.com; wordpress_logged_in_cd9b744c619529c4988e0e94344eaf12=fast5%7C1598037734%7Ch4KmwYcDS4fqzTdOOlAujcT0OBFJRAZlp0mPKwHmWIe%7Cfa56153f817aa703c5a1eadb65b9173ba5eebcad37ea7d0adf8df523b8fd6a77; et-pb-recent-items-colors=%23ffffff%7C%23000000%7C%236eba01%7C%233b68b6%7C%2386c046%7C%231f244d%7Crgba(59%2C104%2C182%2C0.68)%7Crgba(0%2C0%2C0%2C0); et-pb-recent-items-font_family=Playfair%20Display%7CQuicksand%7CMontserrat; wp-settings-time-1=1597869139; wp-settings-1=imgsize%3D%26libraryContent%3Dbrowse%26editor%3Dtinymce%26mfold%3Df%26hidetb%3D1%26align%3Dcenter; woocommerce_items_in_cart=1; woocommerce_cart_hash=124c28c6c8c1cab337dc69de24e6a402'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/?city_field=boise&state_field=ID',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client:
     Socket {
       connecting: false,
       _hadError: false,
       _handle:
        TCP {
          reading: true,
          onread: [Function: onStreamRead
            ],
          onconnection: null,
          _consumed: true,
            [Symbol(owner)
            ]: [Circular
            ]
        },
       _parent: null,
       _host: null,
       _readableState:
        ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0
            },
          length: 0,
          pipes: null,
          pipesCount: 0,
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          paused: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          defaultEncoding: 'utf8',
          awaitDrain: 0,
          readingMore: false,
          decoder: null,
          encoding: null
        },
       readable: true,
       _events: [Object: null prototype
        ] {
          end: [Array
            ],
          drain: [Array
            ],
          timeout: [Function: socketOnTimeout
            ],
          data: [Function: bound socketOnData
            ],
          error: [Array
            ],
          close: [Array
            ],
          resume: [Function: onSocketResume
            ],
          pause: [Function: onSocketPause
            ]
        },
       _eventsCount: 8,
       _maxListeners: undefined,
       _writableState:
        WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite
            ],
          writecb: null,
          writelen: 0,
          bufferedRequest: null,
          lastBufferedRequest: null,
          pendingcb: 0,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          bufferedRequestCount: 0,
          corkedRequestsFree: [Object
            ]
        },
       writable: true,
       allowHalfOpen: true,
       _sockname: null,
       _pendingData: null,
       _pendingEncoding: '',
       server:
        Server {
          _events: [Object
            ],
          _eventsCount: 4,
          _maxListeners: undefined,
          _connections: 2,
          _handle: [TCP
            ],
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 120000,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 40000,
          _connectionKey: '6: : : : 3000',
            [Symbol(IncomingMessage)
            ]: [Function
            ],
            [Symbol(ServerResponse)
            ]: [Function
            ],
            [Symbol(asyncId)
            ]: 6
        },
       _server:
        Server {
          _events: [Object
            ],
          _eventsCount: 4,
          _maxListeners: undefined,
          _connections: 2,
          _handle: [TCP
            ],
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 120000,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          headersTimeout: 40000,
          _connectionKey: '6: : : : 3000',
            [Symbol(IncomingMessage)
            ]: [Function
            ],
            [Symbol(ServerResponse)
            ]: [Function
            ],
            [Symbol(asyncId)
            ]: 6
        },
       timeout: 120000,
       parser:
        HTTPParser {
          '0': [Function: parserOnHeaders
            ],
          '1': [Function: parserOnHeadersComplete
            ],
          '2': [Function: parserOnBody
            ],
          '3': [Function: parserOnMessageComplete
            ],
          '4': [Function: bound onParserExecute
            ],
          _headers: [],
          _url: '',
          socket: [Circular
            ],
          incoming: [Circular
            ],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming
            ],
          parsingHeadersStart: 0,
            [Symbol(isReused)
            ]: false
        },
       on: [Function: socketOnWrap
        ],
       _paused: false,
       _httpMessage:
        ServerResponse {
          _events: [Object
            ],
          _eventsCount: 2,
          _maxListeners: undefined,
          output: [],
          outputEncodings: [],
          outputCallbacks: [],
          outputSize: 0,
          writable: true,
          _last: false,
          chunkedEncoding: false,
          shouldKeepAlive: true,
          useChunkedEncodingByDefault: true,
          sendDate: true,
          _removedConnection: false,
          _removedContLen: false,
          _removedTE: false,
          _contentLength: null,
          _hasBody: true,
          _trailer: '',
          finished: false,
          _headerSent: false,
          socket: [Circular
            ],
          connection: [Circular
            ],
          _header: null,
          _onPendingData: [Function: bound updateOutgoingData
            ],
          _sent100: false,
          _expect_continue: false,
          req: [Circular
            ],
          locals: [Object: null prototype
            ] {},
          _startAt: undefined,
          _startTime: undefined,
          writeHead: [Function: writeHead
            ],
          __onFinished: [Function
            ],
            [Symbol(isCorked)
            ]: false,
            [Symbol(outHeadersKey)
            ]: [Object
            ]
        },
       _peername: { address: ': : 1', family: 'IPv6', port: 51399
        },
        [Symbol(asyncId)
        ]: 15,
        [Symbol(lastWriteQueueSize)
        ]: 0,
        [Symbol(timeout)
        ]:
        Timeout {
          _called: false,
          _idleTimeout: 120000,
          _idlePrev: [TimersList
            ],
          _idleNext: [Timeout
            ],
          _idleStart: 97601,
          _onTimeout: [Function: bound
            ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
            [Symbol(unrefed)
            ]: true,
            [Symbol(asyncId)
            ]: 16,
            [Symbol(triggerId)
            ]: 15
        },
        [Symbol(kBytesRead)
        ]: 0,
        [Symbol(kBytesWritten)
        ]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next
    ],
    baseUrl: '',
    originalUrl: '/?city_field=boise&state_field=ID',
    _parsedUrl:
     Url {
       protocol: null,
       slashes: null,
       auth: null,
       host: null,
       port: null,
       hostname: null,
       hash: null,
       search: '?city_field=boise&state_field=ID',
       query: 'city_field=boise&state_field=ID',
       pathname: '/',
       path: '/?city_field=boise&state_field=ID',
       href: '/?city_field=boise&state_field=ID',
       _raw: '/?city_field=boise&state_field=ID'
    },
    params: {},
    query: { city_field: 'boise', state_field: 'ID'
    },
    res:
     ServerResponse {
       _events: [Object: null prototype
        ] { finish: [Array
            ], end: [Function: onevent
            ]
        },
       _eventsCount: 2,
       _maxListeners: undefined,
       output: [],
       outputEncodings: [],
       outputCallbacks: [],
       outputSize: 0,
       writable: true,
       _last: false,
       chunkedEncoding: false,
       shouldKeepAlive: true,
       useChunkedEncodingByDefault: true,
       sendDate: true,
       _removedConnection: false,
       _removedContLen: false,
       _removedTE: false,
       _contentLength: null,
       _hasBody: true,
       _trailer: '',
       finished: false,
       _headerSent: false,
       socket:
        Socket {
          connecting: false,
          _hadError: false,
          _handle: [TCP
            ],
          _parent: null,
          _host: null,
          _readableState: [ReadableState
            ],
          readable: true,
          _events: [Object
            ],
          _eventsCount: 8,
          _maxListeners: undefined,
          _writableState: [WritableState
            ],
          writable: true,
          allowHalfOpen: true,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: [Server
            ],
          _server: [Server
            ],
          timeout: 120000,
          parser: [HTTPParser
            ],
          on: [Function: socketOnWrap
            ],
          _paused: false,
          _httpMessage: [Circular
            ],
          _peername: [Object
            ],
            [Symbol(asyncId)
            ]: 15,
            [Symbol(lastWriteQueueSize)
            ]: 0,
            [Symbol(timeout)
            ]:
           Timeout {
             _called: false,
             _idleTimeout: 120000,
             _idlePrev: [TimersList
                ],
             _idleNext: [Timeout
                ],
             _idleStart: 97601,
             _onTimeout: [Function: bound
                ],
             _timerArgs: undefined,
             _repeat: null,
             _destroyed: false,
                [Symbol(unrefed)
                ]: true,
                [Symbol(asyncId)
                ]: 16,
                [Symbol(triggerId)
                ]: 15
            },
            [Symbol(kBytesRead)
            ]: 0,
            [Symbol(kBytesWritten)
            ]: 0
        },
       connection:
        Socket {
          connecting: false,
          _hadError: false,
          _handle: [TCP
            ],
          _parent: null,
          _host: null,
          _readableState: [ReadableState
            ],
          readable: true,
          _events: [Object
            ],
          _eventsCount: 8,
          _maxListeners: undefined,
          _writableState: [WritableState
            ],
          writable: true,
          allowHalfOpen: true,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: [Server
            ],
          _server: [Server
            ],
          timeout: 120000,
          parser: [HTTPParser
            ],
          on: [Function: socketOnWrap
            ],
          _paused: false,
          _httpMessage: [Circular
            ],
          _peername: [Object
            ],
            [Symbol(asyncId)
            ]: 15,
            [Symbol(lastWriteQueueSize)
            ]: 0,
            [Symbol(timeout)
            ]:
           Timeout {
             _called: false,
             _idleTimeout: 120000,
             _idlePrev: [TimersList
                ],
             _idleNext: [Timeout
                ],
             _idleStart: 97601,
             _onTimeout: [Function: bound
                ],
             _timerArgs: undefined,
             _repeat: null,
             _destroyed: false,
                [Symbol(unrefed)
                ]: true,
                [Symbol(asyncId)
                ]: 16,
                [Symbol(triggerId)
                ]: 15
            },
            [Symbol(kBytesRead)
            ]: 0,
            [Symbol(kBytesWritten)
            ]: 0
        },
       _header: null,
       _onPendingData: [Function: bound updateOutgoingData
        ],
       _sent100: false,
       _expect_continue: false,
       req: [Circular
        ],
       locals: [Object: null prototype
        ] {},
       _startAt: undefined,
       _startTime: undefined,
       writeHead: [Function: writeHead
        ],
       __onFinished: {
            [Function: listener
            ] queue: [Array
            ]
        },
        [Symbol(isCorked)
        ]: false,
        [Symbol(outHeadersKey)
        ]: [Object: null prototype
        ] { 'x-powered-by': [Array
            ]
        }
    },
    _startAt: [
        137369,
        125343333
    ],
    _startTime: 2020-09-27T15: 36: 16.499Z,
    _remoteAddress: ': : 1',
    body: {},
    secret: undefined,
    cookies: { fornax_anonymousId: 'c9b0e38f-3b85-4bdd-8af8-d0ad3b6e4b33',
       lastVisitedCategory: '20',
       'XSRF-TOKEN':
        'd0fdb4d876cd2ee906ee71331302ddf39626fdc4f32864f94be18fc76e694f4f',
       io: 'b9CZSeh1I7cGcwfQAAAu',
       wordpress_test_cookie: 'WP+Cookie+check',
       et_pb_ab_view_page_34: '839ecd99d3abb5b287202f5e56a699ea',
       et_pb_ab_read_page_34false: 'true',
       tk_ai: 'woo: 1aKSNcAgWUZWMZU6dZJ0abcm',
       'mailchimp.cart.previous_email': 'christian@uxtoolbox.com',
       'mailchimp.cart.current_email': 'christian510@gmail.com',
       wordpress_logged_in_cd9b744c619529c4988e0e94344eaf12:
        'fast5|1598037734|h4KmwYcDS4fqzTdOOlAujcT0OBFJRAZlp0mPKwHmWIe|fa56153f817aa703c5a1eadb65b9173ba5eebcad37ea7d0adf8df523b8fd6a77',
       'et-pb-recent-items-colors':
        '#ffffff|#000000|#6eba01|#3b68b6|#86c046|#1f244d|rgba(59,
        104,
        182,
        0.68)|rgba(0,
        0,
        0,
        0)',
       'et-pb-recent-items-font_family': 'Playfair Display|Quicksand|Montserrat',
       'wp-settings-time-1': '1597869139',
       'wp-settings-1':
        'imgsize=&libraryContent=browse&editor=tinymce&mfold=f&hidetb=1&align=center',
       woocommerce_items_in_cart: '1',
       woocommerce_cart_hash: '124c28c6c8c1cab337dc69de24e6a402'
    },
    signedCookies: [Object: null prototype
    ] {},
    _parsedOriginalUrl:
     Url {
       protocol: null,
       slashes: null,
       auth: null,
       host: null,
       port: null,
       hostname: null,
       hash: null,
       search: '?city_field=boise&state_field=ID',
       query: 'city_field=boise&state_field=ID',
       pathname: '/',
       path: '/?city_field=boise&state_field=ID',
       href: '/?city_field=boise&state_field=ID',
       _raw: '/?city_field=boise&state_field=ID'
    },
    route:
     Route { path: '/', stack: [
            [Layer
            ]
        ], methods: { get: true
        }
    }
}